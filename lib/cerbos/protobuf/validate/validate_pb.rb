# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: validate/validate.proto

require 'google/protobuf'

require 'google/protobuf/descriptor_pb'
require 'google/protobuf/duration_pb'
require 'google/protobuf/timestamp_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("validate/validate.proto", :syntax => :proto2) do
    add_message "validate.FieldRules" do
      optional :message, :message, 17, "validate.MessageRules", json_name: "message"
      oneof :type do
        optional :float, :message, 1, "validate.FloatRules", json_name: "float"
        optional :double, :message, 2, "validate.DoubleRules", json_name: "double"
        optional :int32, :message, 3, "validate.Int32Rules", json_name: "int32"
        optional :int64, :message, 4, "validate.Int64Rules", json_name: "int64"
        optional :uint32, :message, 5, "validate.UInt32Rules", json_name: "uint32"
        optional :uint64, :message, 6, "validate.UInt64Rules", json_name: "uint64"
        optional :sint32, :message, 7, "validate.SInt32Rules", json_name: "sint32"
        optional :sint64, :message, 8, "validate.SInt64Rules", json_name: "sint64"
        optional :fixed32, :message, 9, "validate.Fixed32Rules", json_name: "fixed32"
        optional :fixed64, :message, 10, "validate.Fixed64Rules", json_name: "fixed64"
        optional :sfixed32, :message, 11, "validate.SFixed32Rules", json_name: "sfixed32"
        optional :sfixed64, :message, 12, "validate.SFixed64Rules", json_name: "sfixed64"
        optional :bool, :message, 13, "validate.BoolRules", json_name: "bool"
        optional :string, :message, 14, "validate.StringRules", json_name: "string"
        optional :bytes, :message, 15, "validate.BytesRules", json_name: "bytes"
        optional :enum, :message, 16, "validate.EnumRules", json_name: "enum"
        optional :repeated, :message, 18, "validate.RepeatedRules", json_name: "repeated"
        optional :map, :message, 19, "validate.MapRules", json_name: "map"
        optional :any, :message, 20, "validate.AnyRules", json_name: "any"
        optional :duration, :message, 21, "validate.DurationRules", json_name: "duration"
        optional :timestamp, :message, 22, "validate.TimestampRules", json_name: "timestamp"
      end
    end
    add_message "validate.FloatRules" do
      optional :const, :float, 1, json_name: "const"
      optional :lt, :float, 2, json_name: "lt"
      optional :lte, :float, 3, json_name: "lte"
      optional :gt, :float, 4, json_name: "gt"
      optional :gte, :float, 5, json_name: "gte"
      repeated :in, :float, 6, json_name: "in"
      repeated :not_in, :float, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.DoubleRules" do
      optional :const, :double, 1, json_name: "const"
      optional :lt, :double, 2, json_name: "lt"
      optional :lte, :double, 3, json_name: "lte"
      optional :gt, :double, 4, json_name: "gt"
      optional :gte, :double, 5, json_name: "gte"
      repeated :in, :double, 6, json_name: "in"
      repeated :not_in, :double, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.Int32Rules" do
      optional :const, :int32, 1, json_name: "const"
      optional :lt, :int32, 2, json_name: "lt"
      optional :lte, :int32, 3, json_name: "lte"
      optional :gt, :int32, 4, json_name: "gt"
      optional :gte, :int32, 5, json_name: "gte"
      repeated :in, :int32, 6, json_name: "in"
      repeated :not_in, :int32, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.Int64Rules" do
      optional :const, :int64, 1, json_name: "const"
      optional :lt, :int64, 2, json_name: "lt"
      optional :lte, :int64, 3, json_name: "lte"
      optional :gt, :int64, 4, json_name: "gt"
      optional :gte, :int64, 5, json_name: "gte"
      repeated :in, :int64, 6, json_name: "in"
      repeated :not_in, :int64, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.UInt32Rules" do
      optional :const, :uint32, 1, json_name: "const"
      optional :lt, :uint32, 2, json_name: "lt"
      optional :lte, :uint32, 3, json_name: "lte"
      optional :gt, :uint32, 4, json_name: "gt"
      optional :gte, :uint32, 5, json_name: "gte"
      repeated :in, :uint32, 6, json_name: "in"
      repeated :not_in, :uint32, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.UInt64Rules" do
      optional :const, :uint64, 1, json_name: "const"
      optional :lt, :uint64, 2, json_name: "lt"
      optional :lte, :uint64, 3, json_name: "lte"
      optional :gt, :uint64, 4, json_name: "gt"
      optional :gte, :uint64, 5, json_name: "gte"
      repeated :in, :uint64, 6, json_name: "in"
      repeated :not_in, :uint64, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.SInt32Rules" do
      optional :const, :sint32, 1, json_name: "const"
      optional :lt, :sint32, 2, json_name: "lt"
      optional :lte, :sint32, 3, json_name: "lte"
      optional :gt, :sint32, 4, json_name: "gt"
      optional :gte, :sint32, 5, json_name: "gte"
      repeated :in, :sint32, 6, json_name: "in"
      repeated :not_in, :sint32, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.SInt64Rules" do
      optional :const, :sint64, 1, json_name: "const"
      optional :lt, :sint64, 2, json_name: "lt"
      optional :lte, :sint64, 3, json_name: "lte"
      optional :gt, :sint64, 4, json_name: "gt"
      optional :gte, :sint64, 5, json_name: "gte"
      repeated :in, :sint64, 6, json_name: "in"
      repeated :not_in, :sint64, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.Fixed32Rules" do
      optional :const, :fixed32, 1, json_name: "const"
      optional :lt, :fixed32, 2, json_name: "lt"
      optional :lte, :fixed32, 3, json_name: "lte"
      optional :gt, :fixed32, 4, json_name: "gt"
      optional :gte, :fixed32, 5, json_name: "gte"
      repeated :in, :fixed32, 6, json_name: "in"
      repeated :not_in, :fixed32, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.Fixed64Rules" do
      optional :const, :fixed64, 1, json_name: "const"
      optional :lt, :fixed64, 2, json_name: "lt"
      optional :lte, :fixed64, 3, json_name: "lte"
      optional :gt, :fixed64, 4, json_name: "gt"
      optional :gte, :fixed64, 5, json_name: "gte"
      repeated :in, :fixed64, 6, json_name: "in"
      repeated :not_in, :fixed64, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.SFixed32Rules" do
      optional :const, :sfixed32, 1, json_name: "const"
      optional :lt, :sfixed32, 2, json_name: "lt"
      optional :lte, :sfixed32, 3, json_name: "lte"
      optional :gt, :sfixed32, 4, json_name: "gt"
      optional :gte, :sfixed32, 5, json_name: "gte"
      repeated :in, :sfixed32, 6, json_name: "in"
      repeated :not_in, :sfixed32, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.SFixed64Rules" do
      optional :const, :sfixed64, 1, json_name: "const"
      optional :lt, :sfixed64, 2, json_name: "lt"
      optional :lte, :sfixed64, 3, json_name: "lte"
      optional :gt, :sfixed64, 4, json_name: "gt"
      optional :gte, :sfixed64, 5, json_name: "gte"
      repeated :in, :sfixed64, 6, json_name: "in"
      repeated :not_in, :sfixed64, 7, json_name: "notIn"
      optional :ignore_empty, :bool, 8, json_name: "ignoreEmpty"
    end
    add_message "validate.BoolRules" do
      optional :const, :bool, 1, json_name: "const"
    end
    add_message "validate.StringRules" do
      optional :const, :string, 1, json_name: "const"
      optional :len, :uint64, 19, json_name: "len"
      optional :min_len, :uint64, 2, json_name: "minLen"
      optional :max_len, :uint64, 3, json_name: "maxLen"
      optional :len_bytes, :uint64, 20, json_name: "lenBytes"
      optional :min_bytes, :uint64, 4, json_name: "minBytes"
      optional :max_bytes, :uint64, 5, json_name: "maxBytes"
      optional :pattern, :string, 6, json_name: "pattern"
      optional :prefix, :string, 7, json_name: "prefix"
      optional :suffix, :string, 8, json_name: "suffix"
      optional :contains, :string, 9, json_name: "contains"
      optional :not_contains, :string, 23, json_name: "notContains"
      repeated :in, :string, 10, json_name: "in"
      repeated :not_in, :string, 11, json_name: "notIn"
      optional :strict, :bool, 25, default: true, json_name: "strict"
      optional :ignore_empty, :bool, 26, json_name: "ignoreEmpty"
      oneof :well_known do
        optional :email, :bool, 12, json_name: "email"
        optional :hostname, :bool, 13, json_name: "hostname"
        optional :ip, :bool, 14, json_name: "ip"
        optional :ipv4, :bool, 15, json_name: "ipv4"
        optional :ipv6, :bool, 16, json_name: "ipv6"
        optional :uri, :bool, 17, json_name: "uri"
        optional :uri_ref, :bool, 18, json_name: "uriRef"
        optional :address, :bool, 21, json_name: "address"
        optional :uuid, :bool, 22, json_name: "uuid"
        optional :well_known_regex, :enum, 24, "validate.KnownRegex", json_name: "wellKnownRegex"
      end
    end
    add_message "validate.BytesRules" do
      optional :const, :bytes, 1, json_name: "const"
      optional :len, :uint64, 13, json_name: "len"
      optional :min_len, :uint64, 2, json_name: "minLen"
      optional :max_len, :uint64, 3, json_name: "maxLen"
      optional :pattern, :string, 4, json_name: "pattern"
      optional :prefix, :bytes, 5, json_name: "prefix"
      optional :suffix, :bytes, 6, json_name: "suffix"
      optional :contains, :bytes, 7, json_name: "contains"
      repeated :in, :bytes, 8, json_name: "in"
      repeated :not_in, :bytes, 9, json_name: "notIn"
      optional :ignore_empty, :bool, 14, json_name: "ignoreEmpty"
      oneof :well_known do
        optional :ip, :bool, 10, json_name: "ip"
        optional :ipv4, :bool, 11, json_name: "ipv4"
        optional :ipv6, :bool, 12, json_name: "ipv6"
      end
    end
    add_message "validate.EnumRules" do
      optional :const, :int32, 1, json_name: "const"
      optional :defined_only, :bool, 2, json_name: "definedOnly"
      repeated :in, :int32, 3, json_name: "in"
      repeated :not_in, :int32, 4, json_name: "notIn"
    end
    add_message "validate.MessageRules" do
      optional :skip, :bool, 1, json_name: "skip"
      optional :required, :bool, 2, json_name: "required"
    end
    add_message "validate.RepeatedRules" do
      optional :min_items, :uint64, 1, json_name: "minItems"
      optional :max_items, :uint64, 2, json_name: "maxItems"
      optional :unique, :bool, 3, json_name: "unique"
      optional :items, :message, 4, "validate.FieldRules", json_name: "items"
      optional :ignore_empty, :bool, 5, json_name: "ignoreEmpty"
    end
    add_message "validate.MapRules" do
      optional :min_pairs, :uint64, 1, json_name: "minPairs"
      optional :max_pairs, :uint64, 2, json_name: "maxPairs"
      optional :no_sparse, :bool, 3, json_name: "noSparse"
      optional :keys, :message, 4, "validate.FieldRules", json_name: "keys"
      optional :values, :message, 5, "validate.FieldRules", json_name: "values"
      optional :ignore_empty, :bool, 6, json_name: "ignoreEmpty"
    end
    add_message "validate.AnyRules" do
      optional :required, :bool, 1, json_name: "required"
      repeated :in, :string, 2, json_name: "in"
      repeated :not_in, :string, 3, json_name: "notIn"
    end
    add_message "validate.DurationRules" do
      optional :required, :bool, 1, json_name: "required"
      optional :const, :message, 2, "google.protobuf.Duration", json_name: "const"
      optional :lt, :message, 3, "google.protobuf.Duration", json_name: "lt"
      optional :lte, :message, 4, "google.protobuf.Duration", json_name: "lte"
      optional :gt, :message, 5, "google.protobuf.Duration", json_name: "gt"
      optional :gte, :message, 6, "google.protobuf.Duration", json_name: "gte"
      repeated :in, :message, 7, "google.protobuf.Duration", json_name: "in"
      repeated :not_in, :message, 8, "google.protobuf.Duration", json_name: "notIn"
    end
    add_message "validate.TimestampRules" do
      optional :required, :bool, 1, json_name: "required"
      optional :const, :message, 2, "google.protobuf.Timestamp", json_name: "const"
      optional :lt, :message, 3, "google.protobuf.Timestamp", json_name: "lt"
      optional :lte, :message, 4, "google.protobuf.Timestamp", json_name: "lte"
      optional :gt, :message, 5, "google.protobuf.Timestamp", json_name: "gt"
      optional :gte, :message, 6, "google.protobuf.Timestamp", json_name: "gte"
      optional :lt_now, :bool, 7, json_name: "ltNow"
      optional :gt_now, :bool, 8, json_name: "gtNow"
      optional :within, :message, 9, "google.protobuf.Duration", json_name: "within"
    end
    add_enum "validate.KnownRegex" do
      value :UNKNOWN, 0
      value :HTTP_HEADER_NAME, 1
      value :HTTP_HEADER_VALUE, 2
    end
  end
end

module Cerbos::Protobuf::Validate
  FieldRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.FieldRules").msgclass
  FloatRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.FloatRules").msgclass
  DoubleRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.DoubleRules").msgclass
  Int32Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.Int32Rules").msgclass
  Int64Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.Int64Rules").msgclass
  UInt32Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.UInt32Rules").msgclass
  UInt64Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.UInt64Rules").msgclass
  SInt32Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.SInt32Rules").msgclass
  SInt64Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.SInt64Rules").msgclass
  Fixed32Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.Fixed32Rules").msgclass
  Fixed64Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.Fixed64Rules").msgclass
  SFixed32Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.SFixed32Rules").msgclass
  SFixed64Rules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.SFixed64Rules").msgclass
  BoolRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.BoolRules").msgclass
  StringRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.StringRules").msgclass
  BytesRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.BytesRules").msgclass
  EnumRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.EnumRules").msgclass
  MessageRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.MessageRules").msgclass
  RepeatedRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.RepeatedRules").msgclass
  MapRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.MapRules").msgclass
  AnyRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.AnyRules").msgclass
  DurationRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.DurationRules").msgclass
  TimestampRules = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.TimestampRules").msgclass
  KnownRegex = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("validate.KnownRegex").enummodule
end
