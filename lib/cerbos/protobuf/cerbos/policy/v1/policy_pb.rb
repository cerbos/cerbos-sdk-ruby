# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cerbos/policy/v1/policy.proto

require 'google/protobuf'

require 'cerbos/protobuf/cerbos/effect/v1/effect_pb'
require 'cerbos/protobuf/cerbos/engine/v1/engine_pb'
require 'google/protobuf/timestamp_pb'
require 'google/protobuf/wrappers_pb'
require 'cerbos/protobuf/validate/validate_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("cerbos/policy/v1/policy.proto", :syntax => :proto3) do
    add_message "cerbos.policy.v1.Policy" do
      optional :api_version, :string, 1, json_name: "apiVersion"
      optional :disabled, :bool, 2, json_name: "disabled"
      optional :description, :string, 3, json_name: "description"
      optional :metadata, :message, 4, "cerbos.policy.v1.Metadata", json_name: "metadata"
      map :variables, :string, :string, 8
      oneof :policy_type do
        optional :resource_policy, :message, 5, "cerbos.policy.v1.ResourcePolicy", json_name: "resourcePolicy"
        optional :principal_policy, :message, 6, "cerbos.policy.v1.PrincipalPolicy", json_name: "principalPolicy"
        optional :derived_roles, :message, 7, "cerbos.policy.v1.DerivedRoles", json_name: "derivedRoles"
      end
    end
    add_message "cerbos.policy.v1.Metadata" do
      optional :source_file, :string, 1, json_name: "sourceFile"
      map :annotations, :string, :string, 2
      optional :hash, :message, 3, "google.protobuf.UInt64Value", json_name: "hash"
      optional :store_identifer, :string, 4, json_name: "storeIdentifer"
      optional :store_identifier, :string, 5, json_name: "storeIdentifier"
    end
    add_message "cerbos.policy.v1.ResourcePolicy" do
      optional :resource, :string, 1, json_name: "resource"
      optional :version, :string, 2, json_name: "version"
      repeated :import_derived_roles, :string, 3, json_name: "importDerivedRoles"
      repeated :rules, :message, 4, "cerbos.policy.v1.ResourceRule", json_name: "rules"
      optional :scope, :string, 5, json_name: "scope"
      optional :schemas, :message, 6, "cerbos.policy.v1.Schemas", json_name: "schemas"
    end
    add_message "cerbos.policy.v1.ResourceRule" do
      repeated :actions, :string, 1, json_name: "actions"
      repeated :derived_roles, :string, 2, json_name: "derivedRoles"
      repeated :roles, :string, 3, json_name: "roles"
      optional :condition, :message, 4, "cerbos.policy.v1.Condition", json_name: "condition"
      optional :effect, :enum, 5, "cerbos.effect.v1.Effect", json_name: "effect"
      optional :name, :string, 6, json_name: "name"
    end
    add_message "cerbos.policy.v1.PrincipalPolicy" do
      optional :principal, :string, 1, json_name: "principal"
      optional :version, :string, 2, json_name: "version"
      repeated :rules, :message, 3, "cerbos.policy.v1.PrincipalRule", json_name: "rules"
      optional :scope, :string, 4, json_name: "scope"
    end
    add_message "cerbos.policy.v1.PrincipalRule" do
      optional :resource, :string, 1, json_name: "resource"
      repeated :actions, :message, 2, "cerbos.policy.v1.PrincipalRule.Action", json_name: "actions"
    end
    add_message "cerbos.policy.v1.PrincipalRule.Action" do
      optional :action, :string, 1, json_name: "action"
      optional :condition, :message, 2, "cerbos.policy.v1.Condition", json_name: "condition"
      optional :effect, :enum, 3, "cerbos.effect.v1.Effect", json_name: "effect"
      optional :name, :string, 4, json_name: "name"
    end
    add_message "cerbos.policy.v1.DerivedRoles" do
      optional :name, :string, 1, json_name: "name"
      repeated :definitions, :message, 2, "cerbos.policy.v1.RoleDef", json_name: "definitions"
    end
    add_message "cerbos.policy.v1.RoleDef" do
      optional :name, :string, 1, json_name: "name"
      repeated :parent_roles, :string, 2, json_name: "parentRoles"
      optional :condition, :message, 3, "cerbos.policy.v1.Condition", json_name: "condition"
    end
    add_message "cerbos.policy.v1.Condition" do
      oneof :condition do
        optional :match, :message, 1, "cerbos.policy.v1.Match", json_name: "match"
        optional :script, :string, 2, json_name: "script"
      end
    end
    add_message "cerbos.policy.v1.Match" do
      oneof :op do
        optional :all, :message, 1, "cerbos.policy.v1.Match.ExprList", json_name: "all"
        optional :any, :message, 2, "cerbos.policy.v1.Match.ExprList", json_name: "any"
        optional :none, :message, 3, "cerbos.policy.v1.Match.ExprList", json_name: "none"
        optional :expr, :string, 4, json_name: "expr"
      end
    end
    add_message "cerbos.policy.v1.Match.ExprList" do
      repeated :of, :message, 1, "cerbos.policy.v1.Match", json_name: "of"
    end
    add_message "cerbos.policy.v1.Schemas" do
      optional :principal_schema, :message, 1, "cerbos.policy.v1.Schemas.Schema", json_name: "principalSchema"
      optional :resource_schema, :message, 2, "cerbos.policy.v1.Schemas.Schema", json_name: "resourceSchema"
    end
    add_message "cerbos.policy.v1.Schemas.IgnoreWhen" do
      repeated :actions, :string, 1, json_name: "actions"
    end
    add_message "cerbos.policy.v1.Schemas.Schema" do
      optional :ref, :string, 1, json_name: "ref"
      optional :ignore_when, :message, 2, "cerbos.policy.v1.Schemas.IgnoreWhen", json_name: "ignoreWhen"
    end
    add_message "cerbos.policy.v1.TestFixture" do
    end
    add_message "cerbos.policy.v1.TestFixture.Principals" do
      map :principals, :string, :message, 1, "cerbos.engine.v1.Principal"
    end
    add_message "cerbos.policy.v1.TestFixture.Resources" do
      map :resources, :string, :message, 1, "cerbos.engine.v1.Resource"
    end
    add_message "cerbos.policy.v1.TestFixture.AuxData" do
      map :aux_data, :string, :message, 1, "cerbos.engine.v1.AuxData"
    end
    add_message "cerbos.policy.v1.TestOptions" do
      optional :now, :message, 1, "google.protobuf.Timestamp", json_name: "now"
    end
    add_message "cerbos.policy.v1.TestSuite" do
      optional :name, :string, 1, json_name: "name"
      optional :description, :string, 2, json_name: "description"
      optional :skip, :bool, 3, json_name: "skip"
      optional :skip_reason, :string, 4, json_name: "skipReason"
      repeated :tests, :message, 5, "cerbos.policy.v1.TestTable", json_name: "tests"
      map :principals, :string, :message, 6, "cerbos.engine.v1.Principal"
      map :resources, :string, :message, 7, "cerbos.engine.v1.Resource"
      map :aux_data, :string, :message, 8, "cerbos.engine.v1.AuxData"
      optional :options, :message, 9, "cerbos.policy.v1.TestOptions", json_name: "options"
    end
    add_message "cerbos.policy.v1.TestTable" do
      optional :name, :string, 1, json_name: "name"
      optional :description, :string, 2, json_name: "description"
      optional :skip, :bool, 3, json_name: "skip"
      optional :skip_reason, :string, 4, json_name: "skipReason"
      optional :input, :message, 5, "cerbos.policy.v1.TestTable.Input", json_name: "input"
      repeated :expected, :message, 6, "cerbos.policy.v1.TestTable.Expectation", json_name: "expected"
      optional :options, :message, 7, "cerbos.policy.v1.TestOptions", json_name: "options"
    end
    add_message "cerbos.policy.v1.TestTable.Input" do
      repeated :principals, :string, 1, json_name: "principals"
      repeated :resources, :string, 2, json_name: "resources"
      repeated :actions, :string, 3, json_name: "actions"
      optional :aux_data, :string, 4, json_name: "auxData"
    end
    add_message "cerbos.policy.v1.TestTable.Expectation" do
      optional :principal, :string, 1, json_name: "principal"
      optional :resource, :string, 2, json_name: "resource"
      map :actions, :string, :enum, 3, "cerbos.effect.v1.Effect"
    end
    add_message "cerbos.policy.v1.Test" do
      optional :name, :message, 1, "cerbos.policy.v1.Test.TestName", json_name: "name"
      optional :description, :string, 2, json_name: "description"
      optional :skip, :bool, 3, json_name: "skip"
      optional :skip_reason, :string, 4, json_name: "skipReason"
      optional :input, :message, 5, "cerbos.engine.v1.CheckInput", json_name: "input"
      map :expected, :string, :enum, 6, "cerbos.effect.v1.Effect"
      optional :options, :message, 7, "cerbos.policy.v1.TestOptions", json_name: "options"
    end
    add_message "cerbos.policy.v1.Test.TestName" do
      optional :test_table_name, :string, 1, json_name: "testTableName"
      optional :principal_key, :string, 2, json_name: "principalKey"
      optional :resource_key, :string, 3, json_name: "resourceKey"
    end
    add_message "cerbos.policy.v1.TestResults" do
      repeated :suites, :message, 1, "cerbos.policy.v1.TestResults.Suite", json_name: "suites"
      optional :summary, :message, 2, "cerbos.policy.v1.TestResults.Summary", json_name: "summary"
    end
    add_message "cerbos.policy.v1.TestResults.Tally" do
      optional :result, :enum, 1, "cerbos.policy.v1.TestResults.Result", json_name: "result"
      optional :count, :uint32, 2, json_name: "count"
    end
    add_message "cerbos.policy.v1.TestResults.Summary" do
      optional :overall_result, :enum, 1, "cerbos.policy.v1.TestResults.Result", json_name: "overallResult"
      optional :tests_count, :uint32, 2, json_name: "testsCount"
      repeated :result_counts, :message, 3, "cerbos.policy.v1.TestResults.Tally", json_name: "resultCounts"
    end
    add_message "cerbos.policy.v1.TestResults.Suite" do
      optional :file, :string, 1, json_name: "file"
      optional :name, :string, 2, json_name: "name"
      repeated :principals, :message, 3, "cerbos.policy.v1.TestResults.Principal", json_name: "principals"
      optional :summary, :message, 4, "cerbos.policy.v1.TestResults.Summary", json_name: "summary"
      optional :error, :string, 5, json_name: "error"
      repeated :test_cases, :message, 6, "cerbos.policy.v1.TestResults.TestCase", json_name: "testCases"
    end
    add_message "cerbos.policy.v1.TestResults.TestCase" do
      optional :name, :string, 1, json_name: "name"
      repeated :principals, :message, 2, "cerbos.policy.v1.TestResults.Principal", json_name: "principals"
    end
    add_message "cerbos.policy.v1.TestResults.Principal" do
      optional :name, :string, 1, json_name: "name"
      repeated :resources, :message, 2, "cerbos.policy.v1.TestResults.Resource", json_name: "resources"
    end
    add_message "cerbos.policy.v1.TestResults.Resource" do
      optional :name, :string, 1, json_name: "name"
      repeated :actions, :message, 2, "cerbos.policy.v1.TestResults.Action", json_name: "actions"
    end
    add_message "cerbos.policy.v1.TestResults.Action" do
      optional :name, :string, 1, json_name: "name"
      optional :details, :message, 2, "cerbos.policy.v1.TestResults.Details", json_name: "details"
    end
    add_message "cerbos.policy.v1.TestResults.Details" do
      optional :result, :enum, 1, "cerbos.policy.v1.TestResults.Result", json_name: "result"
      repeated :engine_trace, :message, 4, "cerbos.engine.v1.Trace", json_name: "engineTrace"
      oneof :outcome do
        optional :failure, :message, 2, "cerbos.policy.v1.TestResults.Failure", json_name: "failure"
        optional :error, :string, 3, json_name: "error"
      end
    end
    add_message "cerbos.policy.v1.TestResults.Failure" do
      optional :expected, :enum, 1, "cerbos.effect.v1.Effect", json_name: "expected"
      optional :actual, :enum, 2, "cerbos.effect.v1.Effect", json_name: "actual"
    end
    add_enum "cerbos.policy.v1.TestResults.Result" do
      value :RESULT_UNSPECIFIED, 0
      value :RESULT_SKIPPED, 1
      value :RESULT_PASSED, 2
      value :RESULT_FAILED, 3
      value :RESULT_ERRORED, 4
    end
  end
end

module Cerbos::Protobuf::Cerbos
  module Policy
    module V1
      Policy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Policy").msgclass
      Metadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Metadata").msgclass
      ResourcePolicy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.ResourcePolicy").msgclass
      ResourceRule = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.ResourceRule").msgclass
      PrincipalPolicy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.PrincipalPolicy").msgclass
      PrincipalRule = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.PrincipalRule").msgclass
      PrincipalRule::Action = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.PrincipalRule.Action").msgclass
      DerivedRoles = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.DerivedRoles").msgclass
      RoleDef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.RoleDef").msgclass
      Condition = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Condition").msgclass
      Match = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Match").msgclass
      Match::ExprList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Match.ExprList").msgclass
      Schemas = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Schemas").msgclass
      Schemas::IgnoreWhen = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Schemas.IgnoreWhen").msgclass
      Schemas::Schema = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Schemas.Schema").msgclass
      TestFixture = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestFixture").msgclass
      TestFixture::Principals = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestFixture.Principals").msgclass
      TestFixture::Resources = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestFixture.Resources").msgclass
      TestFixture::AuxData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestFixture.AuxData").msgclass
      TestOptions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestOptions").msgclass
      TestSuite = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestSuite").msgclass
      TestTable = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestTable").msgclass
      TestTable::Input = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestTable.Input").msgclass
      TestTable::Expectation = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestTable.Expectation").msgclass
      Test = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Test").msgclass
      Test::TestName = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.Test.TestName").msgclass
      TestResults = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults").msgclass
      TestResults::Tally = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Tally").msgclass
      TestResults::Summary = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Summary").msgclass
      TestResults::Suite = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Suite").msgclass
      TestResults::TestCase = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.TestCase").msgclass
      TestResults::Principal = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Principal").msgclass
      TestResults::Resource = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Resource").msgclass
      TestResults::Action = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Action").msgclass
      TestResults::Details = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Details").msgclass
      TestResults::Failure = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Failure").msgclass
      TestResults::Result = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("cerbos.policy.v1.TestResults.Result").enummodule
    end
  end
end
